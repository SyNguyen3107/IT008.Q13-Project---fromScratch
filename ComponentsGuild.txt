*Models/, Migrations/ và AnkiAppDB.db (Tầng Dữ liệu)
Chức năng: Đây là "nền móng" của ứng dụng.

Deck.cs, Card.cs: Định nghĩa cấu trúc (thuộc tính) của dữ liệu.

AppDbContext.cs: Là "bản đồ" CSDL, nói cho Entity Framework (EF) Core biết bạn có bảng Decks và Cards cũng như mối quan hệ giữa chúng.

AppDbContextFactory.cs: Là lớp "hỗ trợ" chỉ dùng cho công cụ, giúp lệnh Add-Migration biết cách tạo CSDL.

Migrations/: Lưu trữ lịch sử thay đổi cấu trúc CSDL.

AnkiAppDB.db: Đây chính là file CSDL SQLite thực tế của bạn.

Mối quan hệ: AppDbContext sử dụng các lớp Deck và Card. Các Repositories sẽ "nói chuyện" với AppDbContext.
-----------------------------------------------------------------------------------
*Repositories/ (Tầng Truy cập Dữ liệu - DAL)
Chức năng: Đây là các "người thủ kho", là nơi duy nhất được phép "xuống kho" (CSDL) để lấy hoặc cất dữ liệu.

ICardRepository.cs, IDeckRepository.cs: Là các "hợp đồng" (interface) quy định các hành động (ví dụ: GetAllAsync, AddAsync).

CardRepository.cs, DeckRepository.cs: Là các lớp "thi công" hợp đồng, chứa code C# (dùng LINQ và AppDbContext) để thực sự lấy/lưu dữ liệu.

Mối quan hệ: DeckRepository triển khai IDeckRepository. CardRepository triển khai ICardRepository. Cả hai đều phụ thuộc vào AppDbContext.
-----------------------------------------------------------------------------------
Interfaces/ và Services/ (Tầng Logic Nghiệp vụ - BLL)
Chức năng: Đây là "bộ não" xử lý logic.

StudyService.cs: Chứa "thuật toán" học tập (SRS). Nó quyết định thẻ nào cần học tiếp theo, xử lý kết quả ôn tập (Again, Good...).

INavigationService.cs: "Hợp đồng" cho việc điều hướng (ví dụ: ShowStudyWindow).

NavigationService.cs: (Nằm trong Interfaces/ - xem góp ý) Lớp "thi công" việc điều hướng, giúp ViewModel mở các cửa sổ mà không cần biết về View.

NavigationService.cs: (Nằm trong Interfaces/ - xem góp ý) Lớp "thi công" việc điều hướng, giúp ViewModel mở các cửa sổ mà không cần biết về View.
-----------------------------------------------------------------------------------
*ViewModels/ (Tầng Logic Trình bày)
Chức năng: Đây là các "bộ não" riêng cho từng cửa sổ (View).

Lớp BaseViewModel này là một lớp "cha" mà tất cả các ViewModel khác (như StudyViewModel, MainAnkiViewModel) sẽ kế thừa.
Nhiệm vụ duy nhất của nó là cung cấp một cơ chế để thông báo cho Giao diện (View) mỗi khi một dữ liệu (Property) trong ViewModel thay đổi, để View có thể tự động cập nhật.

MainAnkiViewModel.cs: "Bộ não" của MainAnkiWindow, chịu trách nhiệm tải và hiển thị danh sách Deck, xử lý các nút bấm "Create Deck", "Study".

StudyViewModel.cs: "Bộ não" của StudyWindow, chịu trách nhiệm tải thẻ, lật thẻ, xử lý các nút "Again", "Hard"...

CreateDeckViewModel.cs: "Bộ não" của CreateDeckWindow, xử lý việc lấy tên/mô tả và lưu Deck mới.

Mối quan hệ: Các ViewModel phụ thuộc vào các Interface (như IDeckRepository, IStudyService, INavigationService).
-----------------------------------------------------------------------------------
*Views/ (Tầng Giao diện - UI)
Chức năng: Đây là "khuôn mặt" của ứng dụng, chứa code XAML.

MainAnkiWindow.xaml: Cửa sổ chính (hiển thị danh sách Deck).

StudyWindow.xaml: Cửa sổ "vật chứa" cho phiên học.

StudyCardView.xaml: UserControl chứa "bộ khung" thẻ (mặt trước/sau, các nút...).

CreateDeckWindow.xaml: Cửa sổ/Popup để tạo Deck mới.

AddCardWindow.xaml, Sync.xaml: Các cửa sổ cho chức năng "Thêm Card" và "Đồng bộ".

Mối quan hệ: Binding (kết nối) trực tiếp với các thuộc tính và Command của ViewModel tương ứng.
-----------------------------------------------------------------------------------
*Các file khác
App.xaml/.cs: Điểm khởi động của ứng dụng. Đây là nơi quan trọng nhất để thiết lập Dependency Injection (DI) (kết nối tất cả các bộ phận trên).

Converters/: Các "công cụ" nhỏ giúp XAML "dịch" dữ liệu (ví dụ: true -> Visible).